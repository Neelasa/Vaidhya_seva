package Doctor.dao;

import java.sql.*;
import javax.swing.*;

public class AdminDao {

    private static Connection con;
    private static PreparedStatement ps;
    private static ResultSet rs;

    // Establish connection
    public static Connection getCon() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            return DriverManager.getConnection("jdbc:mysql://localhost:3306/vaidhya_seva", "root", "HAREKRISHNA");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Connection Error: " + e.getMessage());
            return null;
        }
    }

    // ðŸ”„ Switch-case controller for doctor operations
    public static void handleDoctorOperations() {
        Connection conn = getCon();
        if (conn == null) return;

        while (true) {
            String[] options = {"Insert Doctor", "View Doctor", "Update Doctor", "Delete Doctor", "Back"};
            int choice = JOptionPane.showOptionDialog(null, "Choose an operation", "Doctor Management",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

            switch (choice) {
                case 0 -> insertDoctor(conn);
                case 1 -> viewDoctor(conn);
                case 2 -> updateDoctor(conn);
                case 3 -> deleteDoctor(conn);
                case 4 -> {
                    try { conn.close(); } catch (Exception ignored) {}
                    return;
                }
                default -> JOptionPane.showMessageDialog(null, "Invalid choice");
            }
        }
    }

    // âœ… Insert doctor details
    public static void insertDoctor(Connection conn) {
        try {
            String doctorId = JOptionPane.showInputDialog("Enter Doctor ID:");
            String name = JOptionPane.showInputDialog("Enter Doctor Name:");
            String dob = JOptionPane.showInputDialog("Enter Date of Birth (YYYY-MM-DD):");
            String doj = JOptionPane.showInputDialog("Enter Date of Joining (YYYY-MM-DD):");
            String gender = JOptionPane.showInputDialog("Enter Gender:");
            String qualification = JOptionPane.showInputDialog("Enter Qualification:");
            String specialization = JOptionPane.showInputDialog("Enter Specialization:");
            String experience = JOptionPane.showInputDialog("Enter Years of Experience:");
            String street = JOptionPane.showInputDialog("Enter Street:");
            String location = JOptionPane.showInputDialog("Enter Location:");
            String city = JOptionPane.showInputDialog("Enter City:");
            String state = JOptionPane.showInputDialog("Enter State:");
            String pincode = JOptionPane.showInputDialog("Enter Pincode:");
            String contact = JOptionPane.showInputDialog("Enter Contact Number:");
            String email = JOptionPane.showInputDialog("Enter Email ID:");

            String sql = """
                INSERT INTO doctor (DoctorId, DoctorName, DOB, DOJ, Gender, Qualification, Specialization,
                Experience, Street, Location, City, State, Pincode, ContactNo, EmailID)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """;

            ps = conn.prepareStatement(sql);
            ps.setString(1, doctorId);
            ps.setString(2, name);
            ps.setString(3, dob);
            ps.setString(4, doj);
            ps.setString(5, gender);
            ps.setString(6, qualification);
            ps.setString(7, specialization);
            ps.setString(8, experience);
            ps.setString(9, street);
            ps.setString(10, location);
            ps.setString(11, city);
            ps.setString(12, state);
            ps.setString(13, pincode);
            ps.setString(14, contact);
            ps.setString(15, email);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(null, "Doctor inserted successfully.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Insert Error: " + e.getMessage());
        } finally {
            try { if (ps != null) ps.close(); } catch (SQLException ignored) {}
        }
    }

    // âœ… View doctor details
    public static void viewDoctor(Connection conn) {
        try {
            String doctorId = JOptionPane.showInputDialog("Enter Doctor ID to view:");
            String sql = "SELECT * FROM doctor WHERE DoctorId = ?";
            ps = conn.prepareStatement(sql);
            ps.setString(1, doctorId);
            rs = ps.executeQuery();

            if (rs.next()) {
                StringBuilder sb = new StringBuilder();
                sb.append("Doctor Details:\n");
                sb.append("Name: ").append(rs.getString("DoctorName")).append("\n");
                sb.append("DOB: ").append(rs.getString("DOB")).append("\n");
                sb.append("DOJ: ").append(rs.getString("DOJ")).append("\n");
                sb.append("Gender: ").append(rs.getString("Gender")).append("\n");
                sb.append("Qualification: ").append(rs.getString("Qualification")).append("\n");
                sb.append("Specialization: ").append(rs.getString("Specialization")).append("\n");
                sb.append("Experience: ").append(rs.getString("Experience")).append("\n");
                sb.append("Address: ").append(rs.getString("Street")).append(", ")
                        .append(rs.getString("Location")).append(", ")
                        .append(rs.getString("City")).append(", ")
                        .append(rs.getString("State")).append(" - ")
                        .append(rs.getString("Pincode")).append("\n");
                sb.append("Contact: ").append(rs.getString("ContactNo")).append("\n");
                sb.append("Email: ").append(rs.getString("EmailID")).append("\n");

                JOptionPane.showMessageDialog(null, sb.toString());
            } else {
                JOptionPane.showMessageDialog(null, "No doctor found with ID: " + doctorId);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "View Error: " + e.getMessage());
        } finally {
            try { if (rs != null) rs.close(); if (ps != null) ps.close(); } catch (SQLException ignored) {}
        }
    }

    // âœ… Update doctor details
    public static void updateDoctor(Connection conn) {
        try {
            String doctorId = JOptionPane.showInputDialog("Enter Doctor ID to update:");
            String field = JOptionPane.showInputDialog("Enter field to update (e.g., Qualification, ContactNo):");
            String newValue = JOptionPane.showInputDialog("Enter new value:");

            String sql = "UPDATE doctor SET " + field + " = ? WHERE DoctorId = ?";
            ps = conn.prepareStatement(sql);
            ps.setString(1, newValue);
            ps.setString(2, doctorId);
            int rows = ps.executeUpdate();

            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "Doctor details updated successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "No doctor found with ID: " + doctorId);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Update Error: " + e.getMessage());
        } finally {
            try { if (ps != null) ps.close(); } catch (SQLException ignored) {}
        }
    }

    // âœ… Delete doctor record
    public static void deleteDoctor(Connection conn) {
        try {
            String doctorId = JOptionPane.showInputDialog("Enter Doctor ID to delete:");
            String sql = "DELETE FROM doctor WHERE DoctorId = ?";
            ps = conn.prepareStatement(sql);
            ps.setString(1, doctorId);
            int rows = ps.executeUpdate();

            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "Doctor record deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "No doctor found with ID: " + doctorId);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Delete Error: " + e.getMessage());
        } finally {
            try { if (ps != null) ps.close(); } catch (SQLException ignored) {}
        }
    }
}