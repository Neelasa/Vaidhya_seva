package Doctor.dao;

import javax.swing.JOptionPane;
import Doctor.bean.DoctorBean;
import Doctor.bean.LeaveBean;
import Doctor.bean.PatientBean;
import Doctor.dao.DoctorDao;
import Doctor.dao.PatientDao;
import Doctor.dao.ReporterDao;

import java.sql.*;
import java.util.ArrayList;

public class AdminDao {

    static final String DB_URL = "jdbc:mysql://localhost:3306/vaidhya_seva";
    static final String USER = "root";
    static final String PASS = "HAREKRISHNA";

    public static Connection getCon() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            return DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Database connection failed: " + e.getMessage());
            return null;
        }
    }

    public static void handleDoctorOperations() {
        try (Connection conn = getCon()) {
            if (conn == null) return;

            while (true) {
                String[] options = {
                        "Insert Doctor", "View Doctor", "Update Doctor",
                        "Delete Doctor", "Suggest Alternate Doctor", "Back"
                };
                int ch = JOptionPane.showOptionDialog(null, "Choose an operation", "Doctor Management",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

                try {
                    switch (ch) {
                        case 0 -> insertDoctor(conn);
                        case 1 -> viewDoctor(conn);
                        case 2 -> updateDoctor(conn);
                        case 3 -> deleteDoctor(conn);
                        case 4 -> suggestAlternateDoctor();
                        case 5 -> {
                            return;
                        }
                        default -> JOptionPane.showMessageDialog(null, "Invalid choice");
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Operation failed: " + e.getMessage());
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }

    public static void insertDoctor(Connection conn) throws SQLException {
        String doctorId = JOptionPane.showInputDialog("Enter Doctor ID:");
        String name = JOptionPane.showInputDialog("Enter Doctor Name:");
        String dob = JOptionPane.showInputDialog("Enter Date of Birth (YYYY-MM-DD):");
        String doj = JOptionPane.showInputDialog("Enter Date of Joining (YYYY-MM-DD):");
        String gender = JOptionPane.showInputDialog("Enter Gender:");
        String qualification = JOptionPane.showInputDialog("Enter Qualification:");
        String specialization = JOptionPane.showInputDialog("Enter Specialization:");
        int experience = Integer.parseInt(JOptionPane.showInputDialog("Enter Years of Experience:"));
        String street = JOptionPane.showInputDialog("Enter Street:");
        String location = JOptionPane.showInputDialog("Enter Location:");
        String city = JOptionPane.showInputDialog("Enter City:");
        String state = JOptionPane.showInputDialog("Enter State:");
        String pincode = JOptionPane.showInputDialog("Enter Pincode:");
        String contact = JOptionPane.showInputDialog("Enter Contact Number:");
        String email = JOptionPane.showInputDialog("Enter Email ID:");

        String sql = "INSERT INTO doctor (doctor_id, doctor_name, date_of_birth, date_of_joining, gender, qualification, " +
                "specialization, years_of_experience, street, location, city, state, pincode, contact_number, email) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, doctorId);
            stmt.setString(2, name);
            stmt.setString(3, dob);
            stmt.setString(4, doj);
            stmt.setString(5, gender);
            stmt.setString(6, qualification);
            stmt.setString(7, specialization);
            stmt.setInt(8, experience);
            stmt.setString(9, street);
            stmt.setString(10, location);
            stmt.setString(11, city);
            stmt.setString(12, state);
            stmt.setString(13, pincode);
            stmt.setString(14, contact);
            stmt.setString(15, email);
            stmt.executeUpdate();
        }

        JOptionPane.showMessageDialog(null, "Doctor inserted successfully.");
    }

    public static void viewDoctor(Connection conn) throws SQLException {
        String doctorId = JOptionPane.showInputDialog("Enter Doctor ID to view:");
        String sql = "SELECT * FROM doctor WHERE doctor_id = ?";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, doctorId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    StringBuilder sb = new StringBuilder("Doctor Details:\n");

                    // Dynamically print all columns
                    ResultSetMetaData rsmd = rs.getMetaData();
                    int columnCount = rsmd.getColumnCount();
                    for (int i = 1; i <= columnCount; i++) {
                        String colName = rsmd.getColumnName(i);
                        String colValue = rs.getString(i);
                        sb.append(colName).append(": ").append(colValue).append("\n");
                    }

                    JOptionPane.showMessageDialog(null, sb.toString());
                } else {
                    JOptionPane.showMessageDialog(null, "Doctor not found.");
                }
            }
        }
    }

    public static void updateDoctor(Connection conn) throws SQLException {
        String doctorId = JOptionPane.showInputDialog("Enter Doctor ID to update:");

        String[] fields = {
                "doctor_name", "date_of_birth", "date_of_joining", "gender",
                "qualification", "specialization", "years_of_experience",
                "street", "location", "city", "state", "pincode",
                "contact_number", "email"
        };

        String field = (String) JOptionPane.showInputDialog(
                null, "Select field to update:", "Field Selection",
                JOptionPane.QUESTION_MESSAGE, null, fields, fields[0]
        );

        if (field == null || field.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No field selected.");
            return;
        }

        String newValue = JOptionPane.showInputDialog("Enter new value:");

        String sql = "UPDATE doctor SET " + field + " = ? WHERE doctor_id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            if (field.equals("years_of_experience")) {
                stmt.setInt(1, Integer.parseInt(newValue));
            } else {
                stmt.setString(1, newValue);
            }
            stmt.setString(2, doctorId);
            int rows = stmt.executeUpdate();

            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "Doctor updated successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Doctor not found or update failed.");
            }
        }
    }

    public static void deleteDoctor(Connection conn) throws SQLException {
        String doctorId = JOptionPane.showInputDialog("Enter Doctor ID to delete:");
        String sql = "DELETE FROM doctor WHERE doctor_id = ?";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, doctorId);
            int rows = stmt.executeUpdate();

            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "Doctor deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Doctor not found.");
            }
        }
    }

    public static void suggestAlternateDoctor() throws SQLException {
        String patientId = JOptionPane.showInputDialog("Enter the PatientID:");
        PatientBean pb = PatientDao.checkPatient(getCon(), patientId);

        if (pb == null) {
            JOptionPane.showMessageDialog(null, "Patient not found.");
            return;
        }

        String assignedDoctorId = pb.getUserID();
        ArrayList<LeaveBean> onLeave = ReporterDao.allDoctorsLeave(1);

        boolean isOnLeave = onLeave.stream()
                .anyMatch(lb -> lb.getDoctorID().equals(assignedDoctorId));

        if (isOnLeave) {
            ArrayList<LeaveBean> available = ReporterDao.allDoctorsLeave(0);
            StringBuilder sb = new StringBuilder("Assigned doctor is on leave.\nSuggested available doctors:\n");

            for (LeaveBean lb : available) {
                DoctorBean db = DoctorDao.getDoctorById(lb.getDoctorID());
                if (db != null) {
                    sb.append("Doctor ID: ").append(db.getDoctorID())
                            .append(", Name: ").append(db.getDoctorName())
                            .append(", Specialization: ").append(db.getSpecilization())
                            .append("\n");
                }
            }
            JOptionPane.showMessageDialog(null, sb.toString());
        } else {
            JOptionPane.showMessageDialog(null, "Assigned doctor is available.");
        }
    }
}
