package Doctor.dao;

import Doctor.bean.DoctorBean;
import Doctor.bean.PatientBean;
import javax.swing.*;
import java.sql.*;
import java.util.Arrays;
import java.util.List;

public class AdminDao {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/vaidhya_seva";
    private static final String USER = "root";
    private static final String PASS = "HAREKRISHNA";

    public Connection getCon() {
        Connection con = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Database connection error: " + e.getMessage());
            e.printStackTrace();
        }
        return con;
    }

    public void handleDoctorOperations() {
        String[] options = {"Insert Doctor", "View Doctor", "Update Doctor", "Delete Doctor", "Suggest Alternate Doctor", "Back"};
        int choice;

        while (true) {
            choice = JOptionPane.showOptionDialog(
                    null,
                    "Choose an operation:",
                    "Doctor Management",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    options,
                    options[0]);

            switch (choice) {
                case 0:
                    insertDoctor();
                    break;
                case 1:
                    viewDoctor();
                    break;
                case 2:
                    updateDoctor();
                    break;
                case 3:
                    deleteDoctor();
                    break;
                case 4:
                    suggestAlternateDoctor();
                    break;
                case 5:
                case JOptionPane.CLOSED_OPTION:
                    return;
                default:
                    JOptionPane.showMessageDialog(null, "Invalid choice. Please try again.");
            }
        }
    }

    private void insertDoctor() {
        // ... (Code for inserting a doctor)
        // I'll assume your current implementation is correct here.
        // Make sure you use a PreparedStatement with '?' placeholders to prevent SQL injection.
    }

    private void viewDoctor() {
        String doctorId = JOptionPane.showInputDialog("Enter Doctor ID to view details:");
        if (doctorId == null || doctorId.trim().isEmpty()) {
            return; // User cancelled
        }

        String sql = "SELECT * FROM doctor WHERE doctorID = ?";
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            con = getCon();
            if (con == null) return;

            ps = con.prepareStatement(sql);
            ps.setString(1, doctorId);
            rs = ps.executeQuery();

            if (rs.next()) {
                StringBuilder doctorDetails = new StringBuilder();
                doctorDetails.append("Doctor ID: ").append(rs.getString("doctorID")).append("\n");
                doctorDetails.append("Doctor Name: ").append(rs.getString("doctorName")).append("\n");
                doctorDetails.append("Specialization: ").append(rs.getString("specialization")).append("\n");
                doctorDetails.append("Years of Experience: ").append(rs.getInt("yearsOfExperience")).append("\n");
                // ... add other fields as needed
                JOptionPane.showMessageDialog(null, doctorDetails.toString(), "Doctor Details", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "No doctor found with ID: " + doctorId, "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            closeResources(con, ps, rs);
        }
    }

    private void updateDoctor() {
        String doctorId = JOptionPane.showInputDialog("Enter Doctor ID to update:");
        if (doctorId == null || doctorId.trim().isEmpty()) return;

        // Use a whitelist to prevent SQL injection
        List<String> validColumns = Arrays.asList("doctorName", "qualification", "specialization", "contactNumber", "emailID");
        String fieldToUpdate = JOptionPane.showInputDialog("Enter field to update (e.g., doctorName, contactNumber):");
        if (fieldToUpdate == null || fieldToUpdate.trim().isEmpty()) return;

        if (!validColumns.contains(fieldToUpdate.toLowerCase())) {
            JOptionPane.showMessageDialog(null, "Invalid field. Please choose from: " + validColumns.toString());
            return;
        }

        String newValue = JOptionPane.showInputDialog("Enter new value for " + fieldToUpdate + ":");
        if (newValue == null) return;

        String sql = "UPDATE doctor SET " + fieldToUpdate + " = ? WHERE doctorID = ?";
        Connection con = null;
        PreparedStatement ps = null;

        try {
            con = getCon();
            if (con == null) return;
            ps = con.prepareStatement(sql);
            ps.setString(1, newValue);
            ps.setString(2, doctorId);

            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Doctor updated successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "No doctor found with ID: " + doctorId + ". Update failed.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            closeResources(con, ps, null);
        }
    }

    private void deleteDoctor() {
        String doctorId = JOptionPane.showInputDialog("Enter Doctor ID to delete:");
        if (doctorId == null || doctorId.trim().isEmpty()) return;

        String sql = "DELETE FROM doctor WHERE doctorID = ?";
        Connection con = null;
        PreparedStatement ps = null;

        try {
            con = getCon();
            if (con == null) return;
            ps = con.prepareStatement(sql);
            ps.setString(1, doctorId);

            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Doctor deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "No doctor found with ID: " + doctorId + ". Deletion failed.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            closeResources(con, ps, null);
        }
    }

    private void suggestAlternateDoctor() {
        String patientId = JOptionPane.showInputDialog("Enter Patient ID:");
        if (patientId == null || patientId.trim().isEmpty()) return;

        String doctorId = null;
        String patientSql = "SELECT doctorID FROM patient WHERE patientID = ?";
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            con = getCon();
            if (con == null) return;
            ps = con.prepareStatement(patientSql);
            ps.setString(1, patientId);
            rs = ps.executeQuery();
            if (rs.next()) {
                doctorId = rs.getString("doctorID");
            } else {
                JOptionPane.showMessageDialog(null, "Patient not found.");
                return;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            closeResources(con, ps, rs);
        }
        
        // Now check if the assigned doctor is on leave
        String leaveSql = "SELECT doctorID FROM leave WHERE doctorID = ? AND CURDATE() BETWEEN leaveFrom AND leaveTo AND status = 1";
        
        try {
            con = getCon();
            if (con == null) return;
            ps = con.prepareStatement(leaveSql);
            ps.setString(1, doctorId);
            rs = ps.executeQuery();

            if (rs.next()) {
                // Doctor is on leave, suggest another one
                String alternateSql = "SELECT doctorID, doctorName, specialization FROM doctor WHERE doctorID != ? LIMIT 1";
                PreparedStatement alternatePs = null;
                ResultSet alternateRs = null;

                try {
                    alternatePs = con.prepareStatement(alternateSql);
                    alternatePs.setString(1, doctorId);
                    alternateRs = alternatePs.executeQuery();
                    if (alternateRs.next()) {
                        String alternateDoctorId = alternateRs.getString("doctorID");
                        String alternateDoctorName = alternateRs.getString("doctorName");
                        String specialization = alternateRs.getString("specialization");
                        JOptionPane.showMessageDialog(null, "Assigned Doctor is on leave. You can consult with " +
                                alternateDoctorName + " (ID: " + alternateDoctorId + ", Specialization: " + specialization + ")");
                    } else {
                        JOptionPane.showMessageDialog(null, "Assigned Doctor is on leave, but no alternate doctors are available.");
                    }
                } finally {
                    closeResources(null, alternatePs, alternateRs);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Assigned Doctor is available today.");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            closeResources(con, ps, rs);
        }
    }

    private void closeResources(Connection con, PreparedStatement ps, ResultSet rs) {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}